{"title":"Árbol de Decisión y Random Forest: La Calificación de los Partidos Políticos en México","markdown":{"yaml":{"title":"Árbol de Decisión y Random Forest: La Calificación de los Partidos Políticos en México","css":"custom.css","execute":{"enabled":true,"kernel":"python3"}},"headingText":"Modelo de Árbol de Decisión:","headingAttr":{"id":"","classes":["fade-in"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n## Cargar las Libererías: {.fade-in}\n```{python}\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score, f1_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport category_encoders as ce\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score, f1_score\n```\n\n## Cargar los Datos:  {.fade-in} \nSe cargan los datos desde un archivo CSV utilizando la librería `pandas`.\n\n```{python}\ndf = pd.read_csv('/home/barea/randomforest/{{cookiecutter.project_slug}}/data/Partido_2023.csv')\ndf.head(10)\n```\n\n## Imputar los Datos del Tibble por la Mediana: {.fade-in}\nSe imputan los valores nulos en el DataFrame utilizando la mediana de cada columna.\n```{python}\ndf = df.fillna(df.median())\n```\n\n## Explorarar si Existen Valores Nulos: {.fade-in}\nSe verifica la existencia de valores nulos en el Tibble.\n```{python}\ndf.isnull().sum()\n```\n\n## Separar de Variables Predictoras y Objetivo: {.fade-in}\nSe separan las variables predictoras (X) de la variable objetivo (y).\n```{python}\nX = df.drop(['P11_1A_19'], axis=1)\ny = df['P11_1A_19']\n```\n\n# Dividir de Datos en Conjuntos de Entrenamiento y Prueba: {.fade-in}\nSe dividen los datos en conjuntos de entrenamiento y prueba.\n```{python}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42, stratify=y)\n```\n\n## Conocer las Variables Predictoras y de Entrenamiento: {.fade-in}\n```{python}\nprint(X_train.columns) \nprint(X_test.columns)\n``` \n\n## Codificar las Variables: {.fade-in}\nSe codifican las variables categóricas utilizando `OrdinalEncoder`.\n```{python}\nencoder = ce.OrdinalEncoder(cols=[\n'P11_1_19',\n'P11_1A_12',\n'P11_1A_17',\n'P11_1A_18',\n'P11_1A_22',\n'P11_1A_23',\n])\n\nX_train_encoded = encoder.fit_transform(X_train)\nX_test_encoded = encoder.transform(X_test)\n```\n\n## Asegurar que no Haya Valores NaN o inf en los Datos de Entrenamiento y Prueba: {.fade-in}\nSe aseguran que no existan valores NaN o infinitos en los datos de entrenamiento y prueba.\n```{python}\nX_train = X_train.replace([np.inf, -np.inf], np.nan).dropna()\nX_test = X_test.replace([np.inf, -np.inf], np.nan).dropna()\n```\n\n## Buscar los Hiperparámetros del Árbpl de Decisión: {.fade-in}\nSe realiza una búsqueda de hiperparámetros para el modelo de Árbol de Decisión utilizando GridSearchCV.\n```{python}\n\nparam_grid = {\n    'max_depth': [2, 4, 6, 8, 10],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\ngrid_search_tree = GridSearchCV(DecisionTreeClassifier(random_state=0), param_grid, cv=5)\ngrid_search_tree.fit(X_train, y_train)\nbest_tree = grid_search_tree.best_estimator_\n\n```\n\n## Predecir y Evaluar del Árbol de Decisión: {.fade-in}\nSe predicen y evalúan los resultados del modelo de Árbol de Decisión.\n```{python}\ny_train_pred_tree = best_tree.predict(X_train)\ny_test_pred_tree = best_tree.predict(X_test)\n\ntrain_accuracy_tree = accuracy_score(y_train, y_train_pred_tree)\ntest_accuracy_tree = accuracy_score(y_test, y_test_pred_tree)\ntrain_f1_tree = f1_score(y_train, y_train_pred_tree, average='micro')\ntest_f1_tree = f1_score(y_test, y_test_pred_tree, average='micro')\n\nprint('Accuracy en train (árbol de decisión):', train_accuracy_tree)\nprint('Accuracy en test (árbol de decisión):', test_accuracy_tree)\nprint(\"El f1 score en train (árbol de decisión): \", train_f1_tree)\nprint(\"El f1 score en test (árbol de decisión): \", test_f1_tree)\n```\n\n# Visualización de la importancia de las características en el Árbol de Decisión: {.fade-in}\nSe visualiza la importancia de las características en el modelo de Árbol de Decisión.\n```{python}\nimportances_tree = best_tree.feature_importances_\nsns.barplot(x=X.columns, y=importances_tree, palette='bright', saturation=2.0, edgecolor='black', linewidth=2)\nplt.title('Importancia de cada Feature en el Árbol de Decisión')\nplt.show()\n```\n\n# Modelo de Ramdom Forest: {.fade-in}\n```{python}\t\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score\n```\n\n## Dividir el Conjunto de Datos en Entrenamiento y Prueba: {.fade-in}\nSe dividen los datos en conjuntos de entrenamiento y prueba.\n```{python}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n```\n\n## Ajustar el Modelo de Random Forest: {.fade-in}\nSe ajusta el modelo de Random Forest con los datos de entrenamiento.\n```{python}\nmodelo_rf = RandomForestClassifier(n_estimators=100, random_state=42)\nmodelo_rf.fit(X_train, y_train)\n```\n\n# Predecir y Evaluar el  Modelo: {.fade-in}\nSe predicen y evalúan los resultados del modelo de Random Forest.\n```{python}\ny_train_pred = modelo_rf.predict(X_train)\ny_test_pred = modelo_rf.predict(X_test)\nprint(\"Accuracy en train:\", accuracy_score(y_train, y_train_pred))\nprint(\"Accuracy en test:\", accuracy_score(y_test, y_test_pred))\nprint(\"F1 Score en train:\", f1_score(y_train, y_train_pred, average='macro'))\nprint(\"F1 Score en test:\", f1_score(y_test, y_test_pred, average='macro'))\n```\n\n## Preparar Datos para Visualizar: {.fade-in}\n```{python}\nimportances = modelo_rf.feature_importances_\nfeature_names = X_train.columns\n```\n\n## Visualizar la Importancia de las Características: {.fade-in}\nSe visualiza la importancia de las características en el modelo de Random Forest.\n```{python}\nindices = np.argsort(importances)[::-1]\nplt.figure(figsize=(15, 6))\nplt.title(\"Importancia de cada Feature en el Random Forest\")\nplt.bar(range(X_train.shape[1]), importances[indices], align=\"center\")\nplt.xticks(range(X_train.shape[1]), feature_names[indices], rotation=90)\nplt.xlim([-1, X_train.shape[1]])\nplt.show()\n```","srcMarkdownNoYaml":"\n\n# Modelo de Árbol de Decisión: {.fade-in}\n\n## Cargar las Libererías: {.fade-in}\n```{python}\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score, f1_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport category_encoders as ce\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score, f1_score\n```\n\n## Cargar los Datos:  {.fade-in} \nSe cargan los datos desde un archivo CSV utilizando la librería `pandas`.\n\n```{python}\ndf = pd.read_csv('/home/barea/randomforest/{{cookiecutter.project_slug}}/data/Partido_2023.csv')\ndf.head(10)\n```\n\n## Imputar los Datos del Tibble por la Mediana: {.fade-in}\nSe imputan los valores nulos en el DataFrame utilizando la mediana de cada columna.\n```{python}\ndf = df.fillna(df.median())\n```\n\n## Explorarar si Existen Valores Nulos: {.fade-in}\nSe verifica la existencia de valores nulos en el Tibble.\n```{python}\ndf.isnull().sum()\n```\n\n## Separar de Variables Predictoras y Objetivo: {.fade-in}\nSe separan las variables predictoras (X) de la variable objetivo (y).\n```{python}\nX = df.drop(['P11_1A_19'], axis=1)\ny = df['P11_1A_19']\n```\n\n# Dividir de Datos en Conjuntos de Entrenamiento y Prueba: {.fade-in}\nSe dividen los datos en conjuntos de entrenamiento y prueba.\n```{python}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42, stratify=y)\n```\n\n## Conocer las Variables Predictoras y de Entrenamiento: {.fade-in}\n```{python}\nprint(X_train.columns) \nprint(X_test.columns)\n``` \n\n## Codificar las Variables: {.fade-in}\nSe codifican las variables categóricas utilizando `OrdinalEncoder`.\n```{python}\nencoder = ce.OrdinalEncoder(cols=[\n'P11_1_19',\n'P11_1A_12',\n'P11_1A_17',\n'P11_1A_18',\n'P11_1A_22',\n'P11_1A_23',\n])\n\nX_train_encoded = encoder.fit_transform(X_train)\nX_test_encoded = encoder.transform(X_test)\n```\n\n## Asegurar que no Haya Valores NaN o inf en los Datos de Entrenamiento y Prueba: {.fade-in}\nSe aseguran que no existan valores NaN o infinitos en los datos de entrenamiento y prueba.\n```{python}\nX_train = X_train.replace([np.inf, -np.inf], np.nan).dropna()\nX_test = X_test.replace([np.inf, -np.inf], np.nan).dropna()\n```\n\n## Buscar los Hiperparámetros del Árbpl de Decisión: {.fade-in}\nSe realiza una búsqueda de hiperparámetros para el modelo de Árbol de Decisión utilizando GridSearchCV.\n```{python}\n\nparam_grid = {\n    'max_depth': [2, 4, 6, 8, 10],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\ngrid_search_tree = GridSearchCV(DecisionTreeClassifier(random_state=0), param_grid, cv=5)\ngrid_search_tree.fit(X_train, y_train)\nbest_tree = grid_search_tree.best_estimator_\n\n```\n\n## Predecir y Evaluar del Árbol de Decisión: {.fade-in}\nSe predicen y evalúan los resultados del modelo de Árbol de Decisión.\n```{python}\ny_train_pred_tree = best_tree.predict(X_train)\ny_test_pred_tree = best_tree.predict(X_test)\n\ntrain_accuracy_tree = accuracy_score(y_train, y_train_pred_tree)\ntest_accuracy_tree = accuracy_score(y_test, y_test_pred_tree)\ntrain_f1_tree = f1_score(y_train, y_train_pred_tree, average='micro')\ntest_f1_tree = f1_score(y_test, y_test_pred_tree, average='micro')\n\nprint('Accuracy en train (árbol de decisión):', train_accuracy_tree)\nprint('Accuracy en test (árbol de decisión):', test_accuracy_tree)\nprint(\"El f1 score en train (árbol de decisión): \", train_f1_tree)\nprint(\"El f1 score en test (árbol de decisión): \", test_f1_tree)\n```\n\n# Visualización de la importancia de las características en el Árbol de Decisión: {.fade-in}\nSe visualiza la importancia de las características en el modelo de Árbol de Decisión.\n```{python}\nimportances_tree = best_tree.feature_importances_\nsns.barplot(x=X.columns, y=importances_tree, palette='bright', saturation=2.0, edgecolor='black', linewidth=2)\nplt.title('Importancia de cada Feature en el Árbol de Decisión')\nplt.show()\n```\n\n# Modelo de Ramdom Forest: {.fade-in}\n```{python}\t\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score\n```\n\n## Dividir el Conjunto de Datos en Entrenamiento y Prueba: {.fade-in}\nSe dividen los datos en conjuntos de entrenamiento y prueba.\n```{python}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n```\n\n## Ajustar el Modelo de Random Forest: {.fade-in}\nSe ajusta el modelo de Random Forest con los datos de entrenamiento.\n```{python}\nmodelo_rf = RandomForestClassifier(n_estimators=100, random_state=42)\nmodelo_rf.fit(X_train, y_train)\n```\n\n# Predecir y Evaluar el  Modelo: {.fade-in}\nSe predicen y evalúan los resultados del modelo de Random Forest.\n```{python}\ny_train_pred = modelo_rf.predict(X_train)\ny_test_pred = modelo_rf.predict(X_test)\nprint(\"Accuracy en train:\", accuracy_score(y_train, y_train_pred))\nprint(\"Accuracy en test:\", accuracy_score(y_test, y_test_pred))\nprint(\"F1 Score en train:\", f1_score(y_train, y_train_pred, average='macro'))\nprint(\"F1 Score en test:\", f1_score(y_test, y_test_pred, average='macro'))\n```\n\n## Preparar Datos para Visualizar: {.fade-in}\n```{python}\nimportances = modelo_rf.feature_importances_\nfeature_names = X_train.columns\n```\n\n## Visualizar la Importancia de las Características: {.fade-in}\nSe visualiza la importancia de las características en el modelo de Random Forest.\n```{python}\nindices = np.argsort(importances)[::-1]\nplt.figure(figsize=(15, 6))\nplt.title(\"Importancia de cada Feature en el Random Forest\")\nplt.bar(range(X_train.shape[1]), importances[indices], align=\"center\")\nplt.xticks(range(X_train.shape[1]), feature_names[indices], rotation=90)\nplt.xlim([-1, X_train.shape[1]])\nplt.show()\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":true,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"kernel":"python3","engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"vim-dark","css":["custom.css"],"output-file":"randomforest_model.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","bibliography":["references.bib"],"sidebar":{"style":"docked","background":"dark"},"comments":{"hypothesis":true},"theme":{"light":["flatly","theme-light.scss"],"dark":["darkly","theme-dark.scss"]},"code-summary":"Mostrar el Código","title":"Árbol de Decisión y Random Forest: La Calificación de los Partidos Políticos en México"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}